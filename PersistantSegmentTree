//persistant segment tree
//LuoguP3834
#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
const int N=2e5+5;
const int S=5e6+6;

int rt[N];
int c[S][2],in[S][2],s[S],cnt;
int a[N],x[N],l;

int bld(int l,int r){
	int v=++cnt,mid=(l+r)>>1;
	in[v][0]=x[l];in[v][1]=x[r];
	if(r-l==1)return v;
	c[v][0]=bld(l,mid);c[v][1]=bld(mid,r);
	return v;
}

int ins(int x,int t){
	int y=++cnt,v=y;
	in[v][0]=in[x][0],in[v][1]=in[x][1];s[v]=s[x]+1;
	while(c[x][0]){
		if(t<in[c[x][0]][1]){c[v][0]=++cnt;c[v][1]=c[x][1];v=cnt;x=c[x][0];}
		else{c[v][0]=c[x][0];c[v][1]=++cnt;v=cnt;x=c[x][1];}
		in[v][0]=in[x][0],in[v][1]=in[x][1];s[v]=s[x]+1;
	}
	return y;
}

int fnd(int x,int y,int k){
	while(c[x][0]){
		if(s[c[y][0]]-s[c[x][0]]>=k){x=c[x][0];y=c[y][0];}
		else{k-=s[c[y][0]]-s[c[x][0]];x=c[x][1];y=c[y][1];}
	}
	return in[x][0];
}

int main()
{
	int n,m,i;
	scanf("%d%d",&n,&m);
	for(i=0;i<n;i++){
		scanf("%d",&a[i]);
		x[i]=a[i];
	}
	sort(x,x+n);
	l=unique(x,x+n)-x;
	rt[0]=bld(0,l);
	for(i=0;i<n;i++)rt[i+1]=ins(rt[i],a[i]);
	int a,b,k;
	for(i=0;i<m;i++){
		scanf("%d%d%d",&a,&b,&k);
		printf("%d\n",fnd(rt[a-1],rt[b],k));
	}
	return 0;
}
