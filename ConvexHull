//ConvexHull
//P2742
#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
using namespace std;
const int N=1e5+5;
const double EPS=1e-8;

struct vctr{
	double x,y;
	double operator*(vctr a){return x*a.y-y*a.x;}
};
double sqr(double x){return x*x;}
struct pnt{
	double x,y;
	vctr operator-(pnt a){return (vctr){x-a.x,y-a.y};}
}a[N],d[2*N];
int n,t;

bool cmp(pnt a,pnt b){return b.x-a.x>EPS||abs(a.x-b.x)<EPS&&b.y-a.y>EPS;}
double dist(pnt a,pnt b){return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));}

int main()
{
	int i;scanf("%d",&n);
	for(i=1;i<=n;i++)scanf("%lf%lf",&a[i].x,&a[i].y);
	sort(a+1,a+n+1,cmp);d[1]=a[1];d[2]=a[2];t=2;
	for(i=3;i<=n;i++){while(t>1&&(d[t]-d[t-1])*(a[i]-d[t])>=EPS)--t;d[++t]=a[i];}
	for(i=n;i>=1;i--){while(t>1&&(d[t]-d[t-1])*(a[i]-d[t])>=EPS)--t;d[++t]=a[i];}
	double ans=0;for(i=1;i<t;i++)ans+=dist(d[i],d[i+1]);printf("%.2lf",ans);
	return 0;
}
